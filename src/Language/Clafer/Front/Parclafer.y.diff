--- Parclafer.y	2013-07-01 08:27:33.954566173 +0200
+++ Parclafer_patched.y	2013-07-01 08:46:57.978514166 +0200
@@ -120,7 +120,7 @@
 
 
 Declaration :: { Declaration }
-Declaration : 'enum' PosIdent '=' ListEnumId { EnumDecl $2 $4 } 
+Declaration : 'enum' PosIdent '=' ListEnumId { PosEnumDecl (gp $1) $2 $4 } 
   | Element { ElementDecl $1 }
 
 
@@ -129,15 +129,15 @@
 
 
 Constraint :: { Constraint }
-Constraint : '[' ListConstrExp ']' { Constraint (reverse $2) } 
+Constraint : '[' ListConstrExp ']' { PosConstraint (gp $1) (reverse $2) } 
 
 
 SoftConstraint :: { SoftConstraint }
-SoftConstraint : '(' ListExp ')' { SoftConstraint (reverse $2) } 
+SoftConstraint : '(' ListExp ')' { PosSoftConstraint (gp $1) (reverse $2) } 
 
 
 Goal :: { Goal }
-Goal : '<<' ListExp '>>' { Goal (reverse $2) } 
+Goal : '<<' ListExp '>>' { PosGoal (gp $1) (reverse $2) } 
 
 
 TmpScope :: { TmpScope }
@@ -162,17 +162,17 @@
 
 Abstract :: { Abstract }
 Abstract : {- empty -} { AbstractEmpty } 
-  | 'abstract' { Abstract }
+  | 'abstract' { PosAbstract (gp $1) }
 
 
 Elements :: { Elements }
 Elements : {- empty -} { ElementsEmpty } 
-  | '{' ListElement '}' { ElementsList (reverse $2) }
+  | '{' ListElement '}' { PosElementsList (gp $1) (reverse $2) }
 
 
 Element :: { Element }
 Element : Clafer { Subclafer $1 } 
-  | '`' Name Card Elements { ClaferUse $2 $3 $4 }
+  | '`' Name Card Elements { PosClaferUse (gp $1) $2 $3 $4 }
   | Constraint { Subconstraint $1 }
   | Goal { Subgoal $1 }
   | SoftConstraint { Subsoftconstraint $1 }
@@ -184,9 +184,9 @@
 
 
 SuperHow :: { SuperHow }
-SuperHow : ':' { SuperColon } 
-  | '->' { SuperArrow }
-  | '->>' { SuperMArrow }
+SuperHow : ':' { PosSuperColon (gp $1) } 
+  | '->' { PosSuperArrow (gp $1) }
+  | '->>' { PosSuperMArrow (gp $1) }
 
 
 Init :: { Init }
@@ -195,24 +195,24 @@
 
 
 InitHow :: { InitHow }
-InitHow : '=' { InitHow_1 } 
-  | ':=' { InitHow_2 }
+InitHow : '=' { PosInitHow_1 (gp $1) } 
+  | ':=' { PosInitHow_2 (gp $1) }
 
 
 GCard :: { GCard }
 GCard : {- empty -} { GCardEmpty } 
-  | 'xor' { GCardXor }
-  | 'or' { GCardOr }
-  | 'mux' { GCardMux }
-  | 'opt' { GCardOpt }
+  | 'xor' { PosGCardXor (gp $1) }
+  | 'or' { PosGCardOr (gp $1) }
+  | 'mux' { PosGCardMux (gp $1) }
+  | 'opt' { PosGCardOpt (gp $1) }
   | NCard { GCardInterval $1 }
 
 
 Card :: { Card }
 Card : {- empty -} { CardEmpty } 
-  | '?' { CardLone }
-  | '+' { CardSome }
-  | '*' { CardAny }
+  | '?' { PosCardLone (gp $1) }
+  | '+' { PosCardSome (gp $1) }
+  | '*' { PosCardAny (gp $1) }
   | PosInteger { CardNum $1 }
   | NCard { CardInterval $1 }
 
@@ -222,7 +222,7 @@
 
 
 ExInteger :: { ExInteger }
-ExInteger : '*' { ExIntegerAst } 
+ExInteger : '*' { PosExIntegerAst (gp $1) } 
   | PosInteger { ExIntegerNum $1 }
 
 
@@ -231,16 +231,16 @@
 
 
 Exp :: { Exp }
-Exp : 'all' 'disj' Decl '|' Exp { DeclAllDisj $3 $5 } 
-  | 'all' Decl '|' Exp { DeclAll $2 $4 }
+Exp : 'all' 'disj' Decl '|' Exp { PosDeclAllDisj (gp $1) $3 $5 } 
+  | 'all' Decl '|' Exp { PosDeclAll (gp $1) $2 $4 }
   | Quant 'disj' Decl '|' Exp { DeclQuantDisj $1 $3 $5 }
   | Quant Decl '|' Exp { DeclQuant $1 $2 $4 }
   | Exp1 { $1 }
 
 
 Exp1 :: { Exp }
-Exp1 : 'max' Exp2 { EGMax $2 } 
-  | 'min' Exp2 { EGMin $2 }
+Exp1 : 'max' Exp2 { PosEGMax (gp $1) $2 } 
+  | 'min' Exp2 { PosEGMin (gp $1) $2 }
   | Exp1 '<=>' Exp2 { EIff $1 $3 }
   | Exp2 { $1 }
 
@@ -284,7 +284,7 @@
 
 
 Exp9 :: { Exp }
-Exp9 : '!' Exp10 { ENeg $2 } 
+Exp9 : '!' Exp10 { PosENeg (gp $1) $2 } 
   | Exp10 { $1 }
 
 
@@ -318,14 +318,14 @@
 
 
 Exp14 :: { Exp }
-Exp14 : 'sum' Exp15 { ESumSetExp $2 } 
-  | '#' Exp15 { ECSetExp $2 }
-  | '-' Exp15 { EMinExp $2 }
+Exp14 : 'sum' Exp15 { PosESumSetExp (gp $1) $2 } 
+  | '#' Exp15 { PosECSetExp (gp $1) $2 }
+  | '-' Exp15 { PosEMinExp (gp $1) $2 }
   | Exp15 { $1 }
 
 
 Exp15 :: { Exp }
-Exp15 : 'if' Exp15 'then' Exp15 'else' Exp16 { EImpliesElse $2 $4 $6 } 
+Exp15 : 'if' Exp15 'then' Exp15 'else' Exp16 { PosEImpliesElse (gp $1) $2 $4 $6 } 
   | Exp16 { $1 }
 
 
@@ -378,10 +378,10 @@
 
 
 Quant :: { Quant }
-Quant : 'no' { QuantNo } 
-  | 'lone' { QuantLone }
-  | 'one' { QuantOne }
-  | 'some' { QuantSome }
+Quant : 'no' { PosQuantNo (gp $1) } 
+  | 'lone' { PosQuantLone (gp $1) }
+  | 'one' { PosQuantOne (gp $1) }
+  | 'some' { PosQuantSome (gp $1) }
 
 
 EnumId :: { EnumId }
@@ -448,13 +448,20 @@
 thenM :: Err a -> (a -> Err b) -> Err b
 thenM = (>>=)
 
+
+gp x@(PT (Pn _ l c) _) = Span (Pos (toInteger l) (toInteger c)) (Pos (toInteger l) (toInteger c + toInteger (length $ prToken x)))
+pp (PT (Pn _ l c) _ :_) = Pos (toInteger l) (toInteger c)
+pp (Err (Pn _ l c) :_) = Pos (toInteger l) (toInteger c)
+pp _ = error "EOF" -- End of file. What to do here?
+
+
 happyError :: [Token] -> Err a
 happyError ts =
-  Bad $ "syntax error at " ++ tokenPos ts ++ 
+  Bad (pp ts) $ 
   case ts of
     [] -> []
-    [Err _] -> " due to lexer error"
-    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))
+    [Err _] -> "due to lexer error"
+    _ -> "before " ++ unwords (map (id . prToken) (take 4 ts))
 
 myLexer = tokens
 }
